name: Multiple Environment Workflow

# also triggers on push

#trigger PR for a demo

on:
  push:
    branches: [ main ] 
  pull_request: 

env:
  # this can be created on GH action secrets #
  # Use OpenID Connect (OIDC) with a Azure service principal using a Federated Identity Credential https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#use-the-azure-login-action-with-openid-connect
  # created a specific ACR to find vulnerabilities easily in Defender

  # The name of the resource group to be created.
  DEV_RG_NAME: "RG-Dev-AppDeploy-Azure-dasanc"
  # DEV_RG_NAME: "RG-Dev-AppDeploy-Azure-${{ github.event.pull_request.number}}"

  # The location to store the meta data for the deployment.
  DEV_LOCATION: "westeurope"

  # The name of the WebApp
  DEV_WEBAPP_NAME: "DEV-AppDeploy-Azure-dasanc"
  # DEV_WEBAPP_NAME: "DEV-AppDeploy-Azure-${{ github.event.pull_request.number}}"

jobs:
  buildImage:
    permissions:
      actions: read
      contents: read
      id-token: write
      security-events: write   # To upload sarif files

      
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2

    # log into Azure ## NOT USED THIS METHOD
    # - name: "Login via Azure CLI"
      # uses: azure/login@v1
      # with:
        # creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    # Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v1.4.3
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # authenticate into Docker
    - name: "docker login"
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DOCKER_LOGIN_SERVER }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Install the latest Docker version and Skopeo tool
    - name: Install Docker and Skopeo
      run: |

          # Install Docker from the official Docker repository
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

          # Start Docker service
          sudo systemctl enable docker
          sudo systemctl start docker

          # Install Skopeo
          sudo apt-get install -y skopeo

    # Build and push Docker image
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ secrets.DOCKER_LOGIN_SERVER }}/appdeployazure:${{ github.sha }}

    # using terrascan to scan terraform
    - name: Scan Terraform templates
      uses: tenable/terrascan-action@main
      with:
        iac_type: 'terraform'
        iac_version: 'v14'
        policy_type: 'azure'
        only_warn: true

    # adding Snynk scanner
    
    # Scanning Images using Microsoft Defender
    - uses: Azure/container-scan@v0 
      name: Scan image for vulnerabilities
      id: container-scan
      continue-on-error: true
      with:
        image-name: ${{ secrets.DOCKER_LOGIN_SERVER }}/appdeployazure:${{ github.sha }} 
      

      #### Defender for DevOps step

      # Checkout your code repository
    - uses: actions/checkout@v2
     # Install dotnet
    - uses: actions/setup-dotnet@v1
      with:
       dotnet-version: |
         5.0.x
         6.0.x

    - name: Create OCI Image
      run: |
          docker pull nginx:alpine
          skopeo copy docker-daemon:nginx:alpine oci:nginx
   # Run analyzers
    - name: Run Microsoft Security DevOps Analysis
      uses: microsoft/security-devops-action@preview
      id: msdo
      with:
          tools: trivy
         # break: true
  
      env:
          GDN_TRIVY_ACTION: image
          GDN_TRIVY_IMAGEPATH: nginx
          GDB_TRIVY_SEVERITIES: low, medium



   # Upload alerts to the Security tab
    - name: Upload alerts to Security tab
      uses: github/codeql-action/upload-sarif@v1
      with:
       sarif_file: ${{ steps.msdo.outputs.sarifFile }}

      ### end of Defender for DevOps scan ####

    # Sending logs to AppInsights # NOT NEEDED
    # - name: Post logs to appinsights
      # uses: Azure/publish-security-assessments@v0
      # with: 
        # scan-results-path: ${{ steps.container-scan.outputs.scan-report-path }}
        # connection-string: ${{ secrets.AZ_APPINSIGHTS_CONNECTION_STRING }}
        # subscription-token: ${{ secrets.AZ_SUBSCRIPTION_TOKEN }}

  opensource-security:
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@master
     - name: Run Snyk to check for vulnerabilities
       uses: snyk/actions/maven@master
       continue-on-error: true # To make sure that SARIF upload gets called
       env:
         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
       with:
        command: test
        args: --sarif-file-output=snyk.sarif
     - name: Create SARIF directory and move SARIF files
       run: |
          mkdir sarif_files &&
          mv snyk.sarif sarif_files/   
     - name: Upload result to GitHub Code Scanning
       uses: github/codeql-action/upload-sarif@v2
       with:
        sarif_file: snyk.sarif      

  deploy_container:
    permissions:
      actions: read
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    name: Create and Deploy Container to Azure
    needs: buildImage

    env:
      url: https://${{ secrets.DEV_WEBAPP_NAME}}.azurewebsites.net
    
    environment:
      name: Dev
      url: ${{ env.url }}

    steps:
    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2

    # log into Azure ## NOT USED THIS METHOD
    # - name: "Login via Azure CLI"
      # uses: azure/login@v1
      # with:
        # creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v1.4.3
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # deploy infrastructure with Azure Bicep, with gh action secrets
    - name: Deploy infrastructure
      id: azure-deployment
      shell: pwsh
      run: |
        $deployment = $(az deployment sub create --name ${{ secrets.DEV_RG_NAME }} `
          --location ${{ secrets.DEV_LOCATION }} `
          --template-file ./main.bicep `
          --parameters location=${{ secrets.DEV_LOCATION }} `
          --parameters rgName=${{ secrets.DEV_RG_NAME }} `
          --parameters webAppName=${{ secrets.DEV_WEBAPP_NAME}} `
          --parameters dockerRegistryHost=${{ secrets.DOCKER_LOGIN_SERVER }} `
          --parameters dockerRegistryServerUsername=${{ secrets.DOCKER_USERNAME }} `
          --parameters dockerRegistryServerPassword=${{ secrets.DOCKER_PASSWORD }} `
          --parameters dockerImage=appdeployazure:${{ github.sha }} `
          --output json) | ConvertFrom-Json
      working-directory: ./infra/bicep

    # Push container image to Azure WebApp
    - name: Setup Container
      id: container-set
      shell: pwsh
      run: |
        $deployment = $(az webapp config container set  --resource-group ${{ secrets.DEV_RG_NAME }} `
          --name ${{ secrets.DEV_WEBAPP_NAME}} `
          --docker-custom-image-name ${{ secrets.DOCKER_LOGIN_SERVER }}/appdeployazure:${{ github.sha }} `
          --docker-registry-server-url https://${{ secrets.DOCKER_LOGIN_SERVER }} `
          --docker-registry-server-user ${{ secrets.DOCKER_USERNAME }} `
          --docker-registry-server-password ${{ secrets.DOCKER_PASSWORD }} `
          --output json) | ConvertFrom-Json
      working-directory: ./infra/bicep
    
 
  deploy_test:
    
    permissions:
      actions: read
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    name: Deploy to Test
    needs: deploy_container

    # output URL from deployment
    environment:
      name: test
      url:  ${{ steps.get-webapp-url.outputs.webAppUrl }}
 
    steps:
    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2
    
    # log into Azure ## NOT USED THIS METHOD
    # - name: "Login via Azure CLI"
      # uses: azure/login@v1
      # with:
        # creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v1.4.3
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # deploy infrastructure with Azure Bicep
    - name: Deploy infrastructure
      id: azure-deployment
      shell: pwsh
      run: |
        $deployment = $(az deployment sub create --name ${{ secrets.TEST_RG_NAME }} `
          --location ${{ secrets.TEST_LOCATION }} `
          --template-file ./main.bicep `
          --parameters location=${{ secrets.TEST_LOCATION }} `
          --parameters rgName=${{ secrets.TEST_RG_NAME }} `
          --parameters webAppName=${{ secrets.TEST_WEBAPP_NAME}} `
          --parameters dockerRegistryHost=${{ secrets.DOCKER_LOGIN_SERVER }} `
          --parameters dockerRegistryServerUsername=${{ secrets.DOCKER_USERNAME }} `
          --parameters dockerRegistryServerPassword=${{ secrets.DOCKER_PASSWORD }} `
          --parameters dockerImage=${{ secrets.DOCKER_LOGIN_SERVER }}/appdeployazure:${{ github.sha }} `
          --output json) | ConvertFrom-Json
      working-directory: ./infra/bicep

    # Push container image to Azure WebApp
    - name: Setup Container
      id: container-set
      shell: pwsh
      run: |
        $deployment = $(az webapp config container set  --resource-group ${{ secrets.TEST_RG_NAME }} `
          --name ${{ secrets.TEST_WEBAPP_NAME}} `
          --docker-custom-image-name ${{ secrets.DOCKER_LOGIN_SERVER }}/appdeployazure:${{ github.sha }} `
          --docker-registry-server-url https://${{ secrets.DOCKER_LOGIN_SERVER }} `
          --docker-registry-server-user ${{ secrets.DOCKER_USERNAME }} `
          --docker-registry-server-password ${{ secrets.DOCKER_PASSWORD }} `
          --output json) | ConvertFrom-Json
      working-directory: ./infra/bicep

    # Get the URL for the Azure WebApp
    - name: Get the Webapp URL
      id: get-webapp-url
      shell: pwsh
      run: |
        $appurl = $(az webapp config hostname list `
          --resource-group ${{ secrets.TEST_RG_NAME }} `
          --webapp-name ${{ secrets.TEST_WEBAPP_NAME }} `
          --output json) | ConvertFrom-Json
        Write-Output "The webapp URL is https://$($appurl.name)"
        Write-Output "::set-output name=webAppUrl::https://$($appurl.name)"
      working-directory: ./infra/bicep


  deploy_staging:
    
    permissions:
      actions: read
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: deploy_test

    # output URL from  deployment
    environment:
      name: staging
      url:  ${{ steps.get-webapp-url.outputs.webAppUrl }}
 
    steps:
    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2
    
    # log into Azure ## NOT USED THIS METHOD
    # - name: "Login via Azure CLI"
      # uses: azure/login@v1
      # with:
        # creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v1.4.3
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # deploy infrastructure with Azure Bicep
    - name: Deploy infrastructure
      id: azure-deployment
      shell: pwsh
      run: |
        $deployment = $(az deployment sub create --name ${{ secrets.STAGING_RG_NAME }} `
          --location ${{ secrets.STAGING_LOCATION }} `
          --template-file ./main.bicep `
          --parameters location=${{ secrets.STAGING_LOCATION }} `
          --parameters rgName=${{ secrets.STAGING_RG_NAME }} `
          --parameters webAppName=${{ secrets.STAGING_WEBAPP_NAME}} `
          --parameters dockerRegistryHost=${{ secrets.DOCKER_LOGIN_SERVER }} `
          --parameters dockerRegistryServerUsername=${{ secrets.DOCKER_USERNAME }} `
          --parameters dockerRegistryServerPassword=${{ secrets.DOCKER_PASSWORD }} `
          --parameters dockerImage=${{ secrets.DOCKER_LOGIN_SERVER }}/appdeployazure:${{ github.sha }} `
          --output json) | ConvertFrom-Json
      working-directory: ./infra/bicep

    # Push container image to Azure WebApp
    - name: Setup Container
      id: container-set
      shell: pwsh
      run: |
        $deployment = $(az webapp config container set  --resource-group ${{ secrets.STAGING_RG_NAME }} `
          --name ${{ secrets.STAGING_WEBAPP_NAME}} `
          --docker-custom-image-name ${{ secrets.DOCKER_LOGIN_SERVER }}/appdeployazure:${{ github.sha }} `
          --docker-registry-server-url https://${{ secrets.DOCKER_LOGIN_SERVER }} `
          --docker-registry-server-user ${{ secrets.DOCKER_USERNAME }} `
          --docker-registry-server-password ${{ secrets.DOCKER_PASSWORD }} `
          --output json) | ConvertFrom-Json
      working-directory: ./infra/bicep

    # Get the URL for the Azure WebApp
    - name: Get the Webapp URL
      id: get-webapp-url
      shell: pwsh
      run: |
        $appurl = $(az webapp config hostname list `
          --resource-group ${{ secrets.STAGING_RG_NAME }} `
          --webapp-name ${{ secrets.STAGING_WEBAPP_NAME }} `
          --output json) | ConvertFrom-Json
        Write-Output "The webapp URL is https://$($appurl.name)"
        Write-Output "::set-output name=webAppUrl::https://$($appurl.name)"
      working-directory: ./infra/bicep

    
  deploy_production:

    permissions:
      actions: read
      contents: read
      id-token: write
        
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: deploy_staging

    # output URL from env deployment
    environment:
      name: Production
      url:  ${{ steps.get-webapp-url.outputs.webAppUrl }}
 
    steps:
    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2
    
    # log into Azure ## NOT USED THIS METHOD
    # - name: "Login via Azure CLI"
      # uses: azure/login@v1
      # with:
        # creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # Logs in with your Azure credentials
    - name: Azure login
      uses: azure/login@v1.4.3
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # deploy infrastructure with Azure Bicep
    - name: Deploy infrastructure
      id: azure-deployment
      shell: pwsh
      run: |
        $deployment = $(az deployment sub create --name ${{ secrets.PROD_RG_NAME }} `
          --location ${{ secrets.PROD_LOCATION }} `
          --template-file ./main.bicep `
          --parameters location=${{ secrets.PROD_LOCATION }} `
          --parameters rgName=${{ secrets.PROD_RG_NAME }} `
          --parameters webAppName=${{ secrets.PROD_WEBAPP_NAME}} `
          --parameters dockerRegistryHost=${{ secrets.DOCKER_LOGIN_SERVER }} `
          --parameters dockerRegistryServerUsername=${{ secrets.DOCKER_USERNAME }} `
          --parameters dockerRegistryServerPassword=${{ secrets.DOCKER_PASSWORD }} `
          --parameters dockerImage=${{ secrets.DOCKER_LOGIN_SERVER }}/appdeployazure:${{ github.sha }} `
          --output json) | ConvertFrom-Json
      working-directory: ./infra/bicep

    # Push container image to Azure WebApp
    - name: Setup Container
      id: container-set
      shell: pwsh
      run: |
        $deployment = $(az webapp config container set  --resource-group ${{ secrets.PROD_RG_NAME }} `
          --name ${{ secrets.PROD_WEBAPP_NAME}} `
          --docker-custom-image-name ${{ secrets.DOCKER_LOGIN_SERVER }}/appdeployazure:${{ github.sha }} `
          --docker-registry-server-url https://${{ secrets.DOCKER_LOGIN_SERVER }} `
          --docker-registry-server-user ${{ secrets.DOCKER_USERNAME }} `
          --docker-registry-server-password ${{ secrets.DOCKER_PASSWORD }} `
          --output json) | ConvertFrom-Json
      working-directory: ./infra/bicep

    # Get the URL for the Azure WebApp
    - name: Get the Webapp URL
      id: get-webapp-url
      shell: pwsh
      run: |
        $appurl = $(az webapp config hostname list `
          --resource-group ${{ secrets.PROD_RG_NAME }} `
          --webapp-name ${{ secrets.PROD_WEBAPP_NAME }} `
          --output json) | ConvertFrom-Json
        Write-Output "The webapp URL is https://$($appurl.name)"
        Write-Output "::set-output name=webAppUrl::https://$($appurl.name)"
      working-directory: ./infra/bicep
